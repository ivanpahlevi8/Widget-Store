{{template "base" .}}

{{define "title"}}
    {{index .StringMap "title"}}
{{end}}

{{define "content"}}
    <h1 class="mt-5">{{index .StringMap "head"}}</h1>
    <hr>
    <div class="alert alert-danger text-center d-none" id="card-messages"></div>
    <span id="refunded" class="badge bg-danger d-none"> {{index .StringMap "badge-info"}} </span>
    <span id="charged" class="badge bg-success d-none"> Charged </span>
    <table class = "table table-striped table-hover" id="all-res">
        <thead>
            <tr>
                <th>Flag Name</th>
                <th>Value Name</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Widget Id</td>
                <td> <span id="widget-id"></span> </td>
            </tr>
            <tr>
                <td>Customer First Name</td>
                <td> <span id="first-name"></span> </td>
            </tr>
            <tr>
                <td>Customer Last Name</td>
                <td> <span id="last-name"></span> </td>
            </tr>
            <tr>
                <td>Customer Email</td>
                <td> <span id="email"></span> </td>
            </tr>
            <tr>
                <td>Amount Sales</td>
                <td> <span id="amount"></span> </td>
            </tr>
            <tr>
                <td>Quantity Sales</td>
                <td> <span id="quantity"></span> </td>
            </tr>
            <tr>
                <td>Widget Name</td>
                <td> <span id="widget-name"></span> </td>
            </tr>
            <tr>
                <td>Widget Description</td>
                <td> <span id="widget-desc"></span> </td>
            </tr>
        </tbody>
    </table>
    <a class="btn btn-info" href="{{index .StringMap "back_link"}}">Cancel </a>
    <a class="btn btn-warning d-none" href="#!" id="btn-refund">{{index .StringMap "btn-info"}}</a>

    <!-- create input to hold value for refund request from response order -->
    <input type="hidden" id="payment_intent" value=""/>
    <input type="hidden" id="order_amount" value="" />
    <input type="hidden" id="order_currency" value="" />
    <input type="hidden" id="order_id" value="" />
{{end}}

{{define "js"}}
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // get route from window
        let getRoute = window.location.pathname;

        // get message element
        let cardMessages = document.getElementById("card-messages");

        // create function to show error message
        function showErrorMessage(msg) {
            // show card messages
            cardMessages.classList.remove("d-none");
            // add alert messages
            cardMessages.classList.add("alert-danger");
            // remove success alert
            cardMessages.classList.remove("alert-success");
            // add message
            cardMessages.innerText = msg;
        }

        // create function to show success message
        function showSuccessMessage(msg) {
            // show card messages
            cardMessages.classList.remove("d-none");
            // add alert messages
            cardMessages.classList.remove("alert-danger");
            // remove success alert
            cardMessages.classList.add("alert-success");
            // add message
            cardMessages.innerText = msg;
        }

        // get charged and refunded badge from html template
        const refundedBadge = document.getElementById("refunded");
        const chargedBadge = document.getElementById("charged");

        // get btn refund element from html template
        const btnRefund = document.getElementById("btn-refund");

        // extract id from route
        var getId = getRoute.split("/").pop();

        console.log("Get Id : " + getId);

        // cretae header
        var myHeader = new Headers();

        // get token from local storage
        const getToken = localStorage.getItem("user_token");

        console.log("get token : " + getToken);

        // add header value
        myHeader.append("Accept", "application/json");
        myHeader.append("Content-Type", "application/json");
        myHeader.append("Authorization", "Bearer " + getToken);

        // create request
        var requestPayload = {
            method: "POST",
            headers: myHeader,
        };

        // fetching data from api
        console.log("creating request");
        fetch("http://localhost:4001/api/admin/sales?id=" + getId, requestPayload)
            .then(response => response.json())
            .then(function(result){
                console.log(result);

                // check if result exist or not
                if (result) {
                    // get object from object
                    let getTransaction = result.transaction_model;
                    /**
                    transaction object contains components like below :
                    ID                  int       `json:"id"`
                    Amount              int       `json:"amount"`
                    Currency            string    `json:"currency"`
                    LastFour            string    `json:"last_four"`
                    BankReturnCode      string    `json:"bank_return_code"`
                    TransactionStatusId int       `json:"transaction_status_id"`
                    ExpiredMonth        int       `json:"expired_month"`
                    ExpiredYear         int       `json:"expired_year"`
                    PaymentIntent       string    `json:"payment_intent"`
                    PaymentMethod       string    `json:"payment_method"`
                    CreatedAt           time.Time `json:"-"`
                    UpdatedAt           time.Time `json:"-"`
                    */
                    let getWidget = result.widget_model;
                    /**
                    widget componen contains component like below :
                    ID             int       `json:"id"`
                    Name           string    `json:"name"`
                    Description    string    `json:"description"`
                    InventoryLevel int       `json:"inventory_level"`
                    Price          int       `json:"price"`
                    Image          string    `json:"image"`
                    IsReccuring    bool      `json:"is_reccuring"`
                    PlanId         string    `json:"plan_id"`
                    CreatedAt      time.Time `json:"-"`
                    UpdatedAt      time.Time `json:"-"`
                    */
                    let getCustomer = result.customer_model;
                    /**
                    customer object contains component like below :
                    ID        int       `json:"id"`
                    FirstName string    `json:"first_name"`
                    LastName  string    `json:"last_name"`
                    Email     string    `json:"email"`
                    CreatedAt time.Time `json:"-"`
                    UpdatedAt time.Time `json:"-"`
                    */

                    // set field data in table html
                    document.getElementById("widget-id").innerHTML = getWidget.id;
                    document.getElementById("first-name").innerHTML = getCustomer.first_name;
                    document.getElementById("last-name").innerHTML = getCustomer.last_name;
                    document.getElementById("email").innerHTML = getCustomer.email;
                    document.getElementById("amount").innerHTML = formatCurrency(result.amount);
                    document.getElementById("quantity").innerHTML = result.quantity;
                    document.getElementById("widget-name").innerHTML = getWidget.name;
                    document.getElementById("widget-desc").innerHTML = getWidget.description;

                    // assisgn data to input html tag
                    document.getElementById("payment_intent").value = getTransaction.payment_intent;
                    document.getElementById("order_amount").value = getTransaction.amount;
                    document.getElementById("order_currency").value = getTransaction.currency;
                    document.getElementById("order_id").value = getId;

                    // check if data status is refunded or not
                    if(result.status_id === 1) {
                        // if order status is not refunded
                        // show charged status
                        chargedBadge.classList.remove("d-none");
                        // undshow refunded status
                        refundedBadge.classList.add("d-none");
                        // show btn refund
                        btnRefund.classList.remove("d-none");
                    } else if(result.status_id === 2 || result.status_id === 3) {
                        // if order status is refunded
                        // show charged status
                        chargedBadge.classList.add("d-none");
                        // undshow refunded status
                        refundedBadge.classList.remove("d-none");
                        // show btn refund
                        btnRefund.classList.add("d-none");
                    }
                } else {
                    alert("Data Not Exist!!!");
                }
            });

        // create function to formatting currency
        function formatCurrency(curr) {
            // divide currency by 100
            let getCurr = parseFloat(curr/100);

            // formatting to string
            let result = getCurr.toLocaleString("en-US", {style:"currency", currency:"USD"});

            // return value
            return result;
        }

        // ass listener to refund button
        document.getElementById("btn-refund").addEventListener("click", function(){
            Swal.fire({
                title: 'Are you sure?',
                text: "{{index .StringMap "dialog-info1"}}",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: '{{index .StringMap "dialog-confirm-button"}}'
                }).then((result) => {
                    // logic to refund down here
                    // get value for refund request from input
                    let getPaymentIntent = document.getElementById("payment_intent").value;
                    let getOrderAmount = parseInt(document.getElementById("order_amount").value, 10);
                    let getOrderCurrency = document.getElementById("order_currency").value;
                    let getOrderId = parseInt(document.getElementById("order_id").value, 10);

                    // create payload for post request
                    const payload = {
                        payment_intent: getPaymentIntent,
                        currency: getOrderCurrency,
                        amount: getOrderAmount,
                        id: getOrderId,
                    }

                    // create request header
                    var myHeader = new Headers();

                    // get token from local storage
                    const getToken = localStorage.getItem("user_token");

                    console.log("get token : " + getToken);

                    // add header value
                    myHeader.append("Accept", "application/json");
                    myHeader.append("Content-Type", "application/json");
                    myHeader.append("Authorization", "Bearer " + getToken);

                    // create request
                    var requestPayload = {
                        method: "POST",
                        headers: myHeader,
                        body: JSON.stringify(payload),
                    };

                    //console.log(JSON.stringify(payload)); // for testing purposes
                    // do request
                    fetch("{{index .StringMap "url-info"}}", requestPayload)
                        .then(response => response.json())
                        .then(function(result){
                            // check for an error
                            if(!result.ok) {
                                // if there is no error
                                showSuccessMessage("{{index .StringMap "success-message"}}");

                                // if order status is refunded
                                // show charged status
                                chargedBadge.classList.add("d-none");
                                // undshow refunded status
                                refundedBadge.classList.remove("d-none");
                                // show btn refund
                                btnRefund.classList.add("d-none");

                                // show success dialaog
                                if (result.isConfirmed) {
                                    Swal.fire(
                                    'Refund Success!',
                                    'Your Purchasing has been Refuned.',
                                    'success'
                                    )
                                }
                            } else {
                                showErrorMessage("Failed Refunding Charged Payment!!!");
                                console.log(result.content)
                            }
                        })
                })
        });
    </script>
{{end}}